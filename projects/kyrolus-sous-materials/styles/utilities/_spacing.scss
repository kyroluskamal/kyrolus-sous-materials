@use "sass:meta";
$spacer: 1rem;

// Sizes for margin/padding
$sizes: (
  0: 0,
  1: $spacer * 0.1,
  2: $spacer * 0.2,
  3: $spacer * 0.3,
  4: $spacer * 0.4,
  5: $spacer * 0.5,
  6: $spacer * 0.6,
  7: $spacer * 0.7,
  8: $spacer * 0.8,
  9: $spacer * 0.9,
  10: $spacer,
  12: $spacer * 1.2,
  13: $spacer * 1.3,
  14: $spacer * 1.4,
  15: $spacer * 1.5,
  16: $spacer * 1.6,
  17: $spacer * 1.7,
  18: $spacer * 1.8,
  19: $spacer * 1.9,
  20: $spacer * 2,
  21: $spacer * 2.1,
  22: $spacer * 2.2,
  23: $spacer * 2.3,
  24: $spacer * 2.4,
  25: $spacer * 2.5,
  26: $spacer * 2.6,
  27: $spacer * 2.7,
  28: $spacer * 2.8,
  29: $spacer * 2.9,
  30: $spacer * 3,

  auto: auto,
);

// Properties to generate
$properties: (
  m: margin,
  p: padding,
);

// Sides to generate
$sides: (
  t: top,
  b: bottom,
  l: left,
  r: right,
  x: (
    left,
    right,
  ),
  y: (
    top,
    bottom,
  ),
  null: null // For all sides,,,,,,,,,,,,
);

@each $prop, $css-prop in $properties {
  @each $side, $css-side in $sides {
    @each $size, $value in $sizes {
      // Generate the class name
      @if $side == null {
        .#{$prop}-#{$size} {
          #{$css-prop}: $value !important;
        }
      } @else if meta.type-of($css-side) == list {
        .#{$prop}#{$side}-#{$size} {
          @each $individual-side in $css-side {
            #{$css-prop}-#{$individual-side}: $value !important;
          }
        }
      } @else {
        .#{$prop}#{$side}-#{$size} {
          #{$css-prop}-#{$css-side}: $value !important;
        }
      }
    }
  }
}
.mx-auto {
  margin-right: auto;
  margin-left: auto;
}

.my-auto {
  margin-top: auto;
  margin-bottom: auto;
}

.px-auto {
  padding-right: auto;
  padding-left: auto;
}

.py-auto {
  padding-top: auto;
  padding-bottom: auto;
}
