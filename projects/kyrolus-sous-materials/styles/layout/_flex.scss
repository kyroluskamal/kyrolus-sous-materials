// =======================================================
// FINAL FLEXBOX-ONLY SYSTEM (WITHOUT ALIGNMENT OR GAP)
// =======================================================
@use "../abstracts/variables" as *;
// --- 2. RESPONSIVE UTILITY GENERATION (Mobile-First) ---

@each $bp-name, $bp-value in $breakpoints {
  @media (min-width: $bp-value) {
    // Direction
    @each $name, $value in $flex-direction-values {
      .flex-#{$bp-name}-#{$name} {
        flex-direction: $value !important;
      }
    }

    // Wrap
    @each $name, $value in $flex-wrap-values {
      .flex-#{$bp-name}-#{$name} {
        flex-wrap: $value !important;
      }
    }

    // Grow, Shrink & Fill
    .flex-#{$bp-name}-fill {
      flex: 1 1 auto !important;
    }
    @each $name, $value in $flex-grow-values {
      $class: if($name == 1, "flex-#{$bp-name}-grow", "flex-#{$bp-name}-grow-#{$name}");
      .#{$class} {
        flex-grow: $value !important;
      }
    }
    @each $name, $value in $flex-shrink-values {
      $class: if($name == 1, "flex-#{$bp-name}-shrink", "flex-#{$bp-name}-shrink-#{$name}");
      .#{$class} {
        flex-shrink: $value !important;
      }
    }

    @each $name, $value in $order-values {
      .order-#{$bp-name}-#{$name} {
        order: $value;
      }
    }

    @each $name, $value in $flex-basis-values {
      .flex-basis-#{$bp-name}-#{$name} {
        flex-basis: $value;
      }
      .basis-#{$bp-name}-#{$name} {
        flex-basis: $value;
      }
    }
    @each $name, $value in $flex-order-values {
      .flex-#{$bp-name}-#{$name} {
        flex: $value;
      }
    }
  }
}

// --- 3. BASE UTILITY GENERATION (for all screen sizes) ---

// Display
.flex {
  display: flex !important;
}
.inline-flex {
  display: inline-flex !important;
}

// Direction
@each $name, $value in $flex-direction-values {
  .flex-#{$name} {
    flex-direction: $value !important;
  }
}

// Wrap (existing classes and Tailwind aliases)
@each $name, $value in $flex-wrap-values {
  .flex-wrap-#{$name} {
    flex-wrap: $value !important;
  }
}
@each $name, $value in $flex-wrap-values {
  @if $name == wrap {
    .flex-wrap {
      flex-wrap: $value !important;
    }
  } @else if $name == wrap-reverse {
    .flex-wrap-reverse {
      flex-wrap: $value !important;
    }
  } @else if $name == nowrap {
    .flex-nowrap {
      flex-wrap: $value !important;
    }
  }
}

// Fill, Grow, Shrink
.flex-fill {
  flex: 1 1 auto !important;
}
@each $name, $value in $flex-grow-values {
  $class: if($name == 1, "flex-grow", "flex-grow-#{$name}");
  .#{$class} {
    flex-grow: $value !important;
  }
}
@each $name, $value in $flex-shrink-values {
  $class: if($name == 1, "flex-shrink", "flex-shrink-#{$name}");
  .#{$class} {
    flex-shrink: $value !important;
  }
}

@each $name, $value in $flex-order-values {
  .flex-#{$name} {
    flex: $value;
  }
}
@each $name, $value in $flex-basis-values {
  .flex-basis-#{$name} {
    flex-basis: $value;
  }
  .basis-#{$name} {
    flex-basis: $value;
  }
}
@each $name, $value in $order-values {
  .order-#{$name} {
    order: $value;
  }
}
